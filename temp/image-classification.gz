<!DOCTYPE html>
<html lang="en">

<head>

  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Keras documentation">
  <meta name="author" content="Keras Team">
  <link rel="shortcut icon" href="https://keras.io/img/favicon.ico">

  <!-- Social -->
  <meta property="og:title" content="Keras documentation: Image classification from scratch">
  <meta property="og:image" content="https://keras.io/img/logo-k-keras-wb.png">
  <meta name="twitter:title" content="Keras documentation: Image classification from scratch">
  <meta name="twitter:image" content="https://keras.io/img/k-keras-social.png">
  <meta name="twitter:card" content="summary">

  <title>Image classification from scratch</title>

  <!-- Bootstrap core CSS -->
  <link href="/css/bootstrap.min.css" rel="stylesheet">

  <!-- Custom fonts for this template -->
  <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700;800&display=swap" rel="stylesheet">

  <!-- Custom styles for this template -->
  <link href="/css/docs.css" rel="stylesheet">
  <link href="/css/monokai.css" rel="stylesheet">

  <!-- Google Tag Manager -->
  <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
  new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
  j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
  'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
  })(window,document,'script','dataLayer','GTM-5DNGF4N');
  </script>
  <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-175165319-128', 'auto');
  ga('send', 'pageview');
  </script>
  <!-- End Google Tag Manager -->

  <script async defer src="https://buttons.github.io/buttons.js"></script>

</head>

<body>
  <!-- Google Tag Manager (noscript) -->
  <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-5DNGF4N"
  height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
  <!-- End Google Tag Manager (noscript) -->

  <div class='k-page'>
  
    <div class="k-nav" id="nav-menu">
      <a href='/'><img src='/img/logo-small.png' class='logo-small' /></a>

      <div class="nav flex-column nav-pills" role="tablist" aria-orientation="vertical">

        
          <a class="nav-link" href="/about/" role="tab" aria-selected="">About Keras</a>
          
        
          <a class="nav-link" href="/getting_started/" role="tab" aria-selected="">Getting started</a>
          
        
          <a class="nav-link active" href="/examples/" role="tab" aria-selected="">Code examples</a>
          
            
              <a class="nav-sublink active" href="/examples/vision/">Computer Vision</a>
                
                  
                    <a class="nav-sublink2 active" href="/examples/vision/image_classification_from_scratch/">Image classification from scratch</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/mnist_convnet/">Simple MNIST convnet</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/image_classification_efficientnet_fine_tuning/">Image classification via fine-tuning with EfficientNet</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/image_classification_with_vision_transformer/">Image classification with Vision Transformer</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/bit/">Image Classification using BigTransfer (BiT)</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/attention_mil_classification/">Classification using Attention-based Deep Multiple Instance Learning</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/mlp_image_classification/">Image classification with modern MLP models</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/mobilevit/">A mobile-friendly Transformer-based model for image classification</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/xray_classification_with_tpus/">Pneumonia Classification on TPU</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/cct/">Compact Convolutional Transformers</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/convmixer/">Image classification with ConvMixer</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/eanet/">Image classification with EANet (External Attention Transformer)</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/involution/">Involutional neural networks</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/perceiver_image_classification/">Image classification with Perceiver</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/reptile/">Few-Shot learning with Reptile</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/semisupervised_simclr/">Semi-supervised image classification using contrastive pretraining with SimCLR</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/swin_transformers/">Image classification with Swin Transformers</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/vit_small_ds/">Train a Vision Transformer on small datasets</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/shiftvit/">A Vision Transformer without Attention</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/oxford_pets_image_segmentation/">Image segmentation with a U-Net-like architecture</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/deeplabv3_plus/">Multiclass semantic segmentation using DeepLabV3+</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/basnet_segmentation/">Highly accurate boundaries segmentation using BASNet</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/retinanet/">Object Detection with RetinaNet</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/keypoint_detection/">Keypoint Detection with Transfer Learning</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/object_detection_using_vision_transformer/">Object detection with Vision Transformers</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/3D_image_classification/">3D image classification from CT scans</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/depth_estimation/">Monocular depth estimation</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/nerf/">3D volumetric rendering with NeRF</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/pointnet/">Point cloud classification</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/captcha_ocr/">OCR model for reading Captchas</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/handwriting_recognition/">Handwriting recognition</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/autoencoder/">Convolutional autoencoder for image denoising</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/mirnet/">Low-light image enhancement using MIRNet</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/super_resolution_sub_pixel/">Image Super-Resolution using an Efficient Sub-Pixel CNN</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/edsr/">Enhanced Deep Residual Networks for single-image super-resolution</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/zero_dce/">Zero-DCE for low-light image enhancement</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/cutmix/">CutMix data augmentation for image classification</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/mixup/">MixUp augmentation for image classification</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/randaugment/">RandAugment for Image Classification for Improved Robustness</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/image_captioning/">Image captioning</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/nl_image_search/">Natural language image search with a Dual Encoder</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/visualizing_what_convnets_learn/">Visualizing what convnets learn</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/integrated_gradients/">Model interpretability with Integrated Gradients</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/probing_vits/">Investigating Vision Transformer representations</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/grad_cam/">Grad-CAM class activation visualization</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/near_dup_search/">Near-duplicate image search</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/semantic_image_clustering/">Semantic Image Clustering</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/siamese_contrastive/">Image similarity estimation using a Siamese Network with a contrastive loss</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/siamese_network/">Image similarity estimation using a Siamese Network with a triplet loss</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/metric_learning/">Metric learning for image similarity search</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/metric_learning_tf_similarity/">Metric learning for image similarity search using TensorFlow Similarity</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/video_classification/">Video Classification with a CNN-RNN Architecture</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/conv_lstm/">Next-Frame Video Prediction with Convolutional LSTMs</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/video_transformers/">Video Classification with Transformers</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/vivit/">Video Vision Transformer</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/adamatch/">Semi-supervision and domain adaptation with AdaMatch</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/barlow_twins/">Barlow Twins for Contrastive SSL</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/cait/">Class Attention Image Transformers with LayerScale</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/consistency_training/">Consistency training with supervision</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/deit/">Distilling Vision Transformers</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/fixres/">FixRes: Fixing train-test resolution discrepancy</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/focal_modulation_network/">Focal Modulation: A replacement for Self-Attention</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/forwardforward/">Using the Forward-Forward Algorithm for Image Classification</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/fully_convolutional_network/">Image Segmentation using Composable Fully-Convolutional Networks</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/gradient_centralization/">Gradient Centralization for Better Training Performance</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/knowledge_distillation/">Knowledge Distillation</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/learnable_resizer/">Learning to Resize in Computer Vision</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/masked_image_modeling/">Masked image modeling with Autoencoders</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/nnclr/">Self-supervised contrastive learning with NNCLR</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/patch_convnet/">Augmenting convnets with aggregated attention</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/pointnet_segmentation/">Point cloud segmentation with PointNet</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/segformer/">Semantic segmentation with SegFormer and Hugging Face Transformers</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/simsiam/">Self-supervised contrastive learning with SimSiam</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/supervised-contrastive-learning/">Supervised Contrastive Learning</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/temporal_latent_bottleneck/">When Recurrence meets Transformers</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/token_learner/">Learning to tokenize in Vision Transformers</a>
                  
                    <a class="nav-sublink2" href="/examples/vision/yolov8/">Efficient Object Detection with YOLOV8 and KerasCV</a>
                  
                
            
              <a class="nav-sublink" href="/examples/nlp/">Natural Language Processing</a>
                
            
              <a class="nav-sublink" href="/examples/structured_data/">Structured Data</a>
                
            
              <a class="nav-sublink" href="/examples/timeseries/">Timeseries</a>
                
            
              <a class="nav-sublink" href="/examples/generative/">Generative Deep Learning</a>
                
            
              <a class="nav-sublink" href="/examples/audio/">Audio Data</a>
                
            
              <a class="nav-sublink" href="/examples/rl/">Reinforcement Learning</a>
                
            
              <a class="nav-sublink" href="/examples/graph/">Graph Data</a>
                
            
              <a class="nav-sublink" href="/examples/keras_recipes/">Quick Keras Recipes</a>
                
            
          
        
          <a class="nav-link" href="/guides/" role="tab" aria-selected="">Developer guides</a>
          
        
          <a class="nav-link" href="/api/" role="tab" aria-selected="">API reference</a>
          
        
          <a class="nav-link" href="/keras_core/" role="tab" aria-selected="">Keras Core: Keras for TensorFlow, JAX, and PyTorch</a>
          
        
          <a class="nav-link" href="/keras_tuner/" role="tab" aria-selected="">KerasTuner: Hyperparameter Tuning</a>
          
        
          <a class="nav-link" href="/keras_cv/" role="tab" aria-selected="">KerasCV: Computer Vision Workflows</a>
          
        
          <a class="nav-link" href="/keras_nlp/" role="tab" aria-selected="">KerasNLP: Natural Language Workflows</a>
          
        
          <a class="nav-link" href="/why_keras/" role="tab" aria-selected="">Why choose Keras?</a>
          
        
          <a class="nav-link" href="/governance/" role="tab" aria-selected="">Community & governance</a>
          
        
          <a class="nav-link" href="/contributing/" role="tab" aria-selected="">Contributing to Keras</a>
          
        

      </div>

    </div>

    <div class='k-main'>
      
      <div class='k-main-top'>
        <script>
          function displayDropdownMenu() {
            e = document.getElementById("nav-menu");
            if (e.style.display == "block") {
              e.style.display = "none";
            }
            else {
              e.style.display = "block";
              document.getElementById("dropdown-nav").style.display = "block";
            }
          }

          function resetMobileUI() {
            if (window.innerWidth <= 840) {
              document.getElementById("nav-menu").style.display = "none";
              document.getElementById("dropdown-nav").style.display = "block";
            }
            else {
              document.getElementById("nav-menu").style.display = "block";
              document.getElementById("dropdown-nav").style.display = "none";
            }
          }

          window.onresize = resetMobileUI;
        </script>
        <div id='dropdown-nav' onclick="displayDropdownMenu();">
          <svg viewBox="-20 -20 120 120" width="60" height="60">
            <rect width="100" height="20"></rect>
            <rect y="30" width="100" height="20"></rect>
            <rect y="60" width="100" height="20"></rect>
          </svg>
        </div>

        <form class="bd-search d-flex align-items-center k-search-form" id="search-form">
          <input type="search" class="k-search-input" id="search-input" placeholder="Search Keras documentation..." aria-label="Search Keras documentation..." autocomplete="off">
            <button class="k-search-btn">
              <svg width="13" height="13" viewBox="0 0 13 13"><title>search</title><path d="m4.8495 7.8226c0.82666 0 1.5262-0.29146 2.0985-0.87438 0.57232-0.58292 0.86378-1.2877 0.87438-2.1144 0.010599-0.82666-0.28086-1.5262-0.87438-2.0985-0.59352-0.57232-1.293-0.86378-2.0985-0.87438-0.8055-0.010599-1.5103 0.28086-2.1144 0.87438-0.60414 0.59352-0.8956 1.293-0.87438 2.0985 0.021197 0.8055 0.31266 1.5103 0.87438 2.1144 0.56172 0.60414 1.2665 0.8956 2.1144 0.87438zm4.4695 0.2115 3.681 3.6819-1.259 1.284-3.6817-3.7 0.0019784-0.69479-0.090043-0.098846c-0.87973 0.76087-1.92 1.1413-3.1207 1.1413-1.3553 0-2.5025-0.46363-3.4417-1.3909s-1.4088-2.0686-1.4088-3.4239c0-1.3553 0.4696-2.4966 1.4088-3.4239 0.9392-0.92727 2.0864-1.3969 3.4417-1.4088 1.3553-0.011889 2.4906 0.45771 3.406 1.4088 0.9154 0.95107 1.379 2.0924 1.3909 3.4239 0 1.2126-0.38043 2.2588-1.1413 3.1385l0.098834 0.090049z"></path></svg>
            </button>
        </form>
        <script>
          var form = document.getElementById('search-form');
          form.onsubmit = function(e) {
            e.preventDefault();
            var query = document.getElementById('search-input').value;
            window.location.href = '/search.html?query=' + query;
            return False
          }
        </script>

      </div>
      <div class='k-main-inner'>
        <div class='k-location-slug'>
            » 
                <a href='/examples'>Code examples</a> /
              
                <a href='/examples/vision'>Computer Vision</a> /
               Image classification from scratch
        </div>
        <div class='k-content'>
          <h1 id="image-classification-from-scratch">Image classification from scratch</h1>
<p><strong>Author:</strong> <a href="https://twitter.com/fchollet">fchollet</a><br>
<strong>Date created:</strong> 2020/04/27<br>
<strong>Last modified:</strong> 2022/11/10<br>
<strong>Description:</strong> Training an image classifier from scratch on the Kaggle Cats vs Dogs dataset.</p>
<p><img class="k-inline-icon" src="https://colab.research.google.com/img/colab_favicon.ico"/> <a href="https://colab.research.google.com/github/keras-team/keras-io/blob/master/examples/vision/ipynb/image_classification_from_scratch.ipynb"><strong>View in Colab</strong></a>  <span class="k-dot">•</span><img class="k-inline-icon" src="https://github.com/favicon.ico"/> <a href="https://github.com/keras-team/keras-io/blob/master/examples/vision/image_classification_from_scratch.py"><strong>GitHub source</strong></a></p>
<hr />
<h2 id="introduction">Introduction</h2>
<p>This example shows how to do image classification from scratch, starting from JPEG
image files on disk, without leveraging pre-trained weights or a pre-made Keras
Application model. We demonstrate the workflow on the Kaggle Cats vs Dogs binary
 classification dataset.</p>
<p>We use the <code>image_dataset_from_directory</code> utility to generate the datasets, and
we use Keras image preprocessing layers for image standardization and data augmentation.</p>
<hr />
<h2 id="setup">Setup</h2>
<div class="codehilite"><pre><span></span><code><span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="nn">tf</span>
<span class="kn">from</span> <span class="nn">tensorflow</span> <span class="kn">import</span> <span class="n">keras</span>
<span class="kn">from</span> <span class="nn">tensorflow.keras</span> <span class="kn">import</span> <span class="n">layers</span>
</code></pre></div>

<hr />
<h2 id="load-the-data-the-cats-vs-dogs-dataset">Load the data: the Cats vs Dogs dataset</h2>
<h3 id="raw-data-download">Raw data download</h3>
<p>First, let's download the 786M ZIP archive of the raw data:</p>
<div class="codehilite"><pre><span></span><code><span class="err">!</span><span class="n">curl</span> <span class="o">-</span><span class="n">O</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">download</span><span class="o">.</span><span class="n">microsoft</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">download</span><span class="o">/</span><span class="mi">3</span><span class="o">/</span><span class="n">E</span><span class="o">/</span><span class="mi">1</span><span class="o">/</span><span class="mf">3E1</span><span class="n">C3F21</span><span class="o">-</span><span class="n">ECDB</span><span class="o">-</span><span class="mi">4869</span><span class="o">-</span><span class="mi">8368</span><span class="o">-</span><span class="mi">6</span><span class="n">DEBA77B919F</span><span class="o">/</span><span class="n">kagglecatsanddogs_5340</span><span class="o">.</span><span class="n">zip</span>
</code></pre></div>

<div class="codehilite"><pre><span></span><code><span class="err">!</span><span class="n">unzip</span> <span class="o">-</span><span class="n">q</span> <span class="n">kagglecatsanddogs_5340</span><span class="o">.</span><span class="n">zip</span>
<span class="err">!</span><span class="n">ls</span>
</code></pre></div>

<div class="k-default-codeblock">

<div class="codehilite"><pre><span></span><code>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  786M  100  786M    0     0   182M      0  0:00:04  0:00:04 --:--:--  195M

 CDLA-Permissive-2.0.pdf           kagglecatsanddogs_5340.zip
 PetImages                &#39;readme[1].txt&#39;
 image_classification_from_scratch.ipynb
</code></pre></div>


</div>
<p>Now we have a <code>PetImages</code> folder which contain two subfolders, <code>Cat</code> and <code>Dog</code>. Each
 subfolder contains image files for each category.</p>
<div class="codehilite"><pre><span></span><code><span class="err">!</span><span class="n">ls</span> <span class="n">PetImages</span>
</code></pre></div>

<div class="k-default-codeblock">

<div class="codehilite"><pre><span></span><code>Cat  Dog
</code></pre></div>


</div>
<h3 id="filter-out-corrupted-images">Filter out corrupted images</h3>
<p>When working with lots of real-world image data, corrupted images are a common
occurence. Let's filter out badly-encoded images that do not feature the string "JFIF"
in their header.</p>
<div class="codehilite"><pre><span></span><code><span class="kn">import</span> <span class="nn">os</span>

<span class="n">num_skipped</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">folder_name</span> <span class="ow">in</span> <span class="p">(</span><span class="s2">&quot;Cat&quot;</span><span class="p">,</span> <span class="s2">&quot;Dog&quot;</span><span class="p">):</span>
    <span class="n">folder_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;PetImages&quot;</span><span class="p">,</span> <span class="n">folder_name</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">fname</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">):</span>
        <span class="n">fpath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">fname</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">fobj</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">fpath</span><span class="p">,</span> <span class="s2">&quot;rb&quot;</span><span class="p">)</span>
            <span class="n">is_jfif</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">compat</span><span class="o">.</span><span class="n">as_bytes</span><span class="p">(</span><span class="s2">&quot;JFIF&quot;</span><span class="p">)</span> <span class="ow">in</span> <span class="n">fobj</span><span class="o">.</span><span class="n">peek</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">fobj</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">is_jfif</span><span class="p">:</span>
            <span class="n">num_skipped</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="c1"># Delete corrupted image</span>
            <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">fpath</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Deleted </span><span class="si">%d</span><span class="s2"> images&quot;</span> <span class="o">%</span> <span class="n">num_skipped</span><span class="p">)</span>
</code></pre></div>

<div class="k-default-codeblock">

<div class="codehilite"><pre><span></span><code>Deleted 1590 images
</code></pre></div>


</div>
<hr />
<h2 id="generate-a-dataset">Generate a <code>Dataset</code></h2>
<div class="codehilite"><pre><span></span><code><span class="n">image_size</span> <span class="o">=</span> <span class="p">(</span><span class="mi">180</span><span class="p">,</span> <span class="mi">180</span><span class="p">)</span>
<span class="n">batch_size</span> <span class="o">=</span> <span class="mi">128</span>

<span class="n">train_ds</span><span class="p">,</span> <span class="n">val_ds</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">utils</span><span class="o">.</span><span class="n">image_dataset_from_directory</span><span class="p">(</span>
    <span class="s2">&quot;PetImages&quot;</span><span class="p">,</span>
    <span class="n">validation_split</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span>
    <span class="n">subset</span><span class="o">=</span><span class="s2">&quot;both&quot;</span><span class="p">,</span>
    <span class="n">seed</span><span class="o">=</span><span class="mi">1337</span><span class="p">,</span>
    <span class="n">image_size</span><span class="o">=</span><span class="n">image_size</span><span class="p">,</span>
    <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div>

<div class="k-default-codeblock">

<div class="codehilite"><pre><span></span><code>Found 23410 files belonging to 2 classes.
Using 18728 files for training.
Using 4682 files for validation.
</code></pre></div>


</div>
<hr />
<h2 id="visualize-the-data">Visualize the data</h2>
<p>Here are the first 9 images in the training dataset. As you can see, label 1 is "dog"
and label 0 is "cat".</p>
<div class="codehilite"><pre><span></span><code><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>

<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
<span class="k">for</span> <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="ow">in</span> <span class="n">train_ds</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
        <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">images</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">numpy</span><span class="p">()</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s2">&quot;uint8&quot;</span><span class="p">))</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">labels</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s2">&quot;off&quot;</span><span class="p">)</span>
</code></pre></div>

<div class="k-default-codeblock">

<div class="codehilite"><pre><span></span><code>Corrupt JPEG data: 2226 extraneous bytes before marker 0xd9
</code></pre></div>


</div>

<p><img alt="png" src="/img/examples/vision/image_classification_from_scratch/image_classification_from_scratch_14_1.png" /></p>
<hr />
<h2 id="using-image-data-augmentation">Using image data augmentation</h2>
<p>When you don't have a large image dataset, it's a good practice to artificially
introduce sample diversity by applying random yet realistic transformations to the
training images, such as random horizontal flipping or small random rotations. This
helps expose the model to different aspects of the training data while slowing down
overfitting.</p>
<div class="codehilite"><pre><span></span><code><span class="n">data_augmentation</span> <span class="o">=</span> <span class="n">keras</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span>
    <span class="p">[</span>
        <span class="n">layers</span><span class="o">.</span><span class="n">RandomFlip</span><span class="p">(</span><span class="s2">&quot;horizontal&quot;</span><span class="p">),</span>
        <span class="n">layers</span><span class="o">.</span><span class="n">RandomRotation</span><span class="p">(</span><span class="mf">0.1</span><span class="p">),</span>
    <span class="p">]</span>
<span class="p">)</span>
</code></pre></div>

<p>Let's visualize what the augmented samples look like, by applying <code>data_augmentation</code>
repeatedly to the first image in the dataset:</p>
<div class="codehilite"><pre><span></span><code><span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
<span class="k">for</span> <span class="n">images</span><span class="p">,</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">train_ds</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
        <span class="n">augmented_images</span> <span class="o">=</span> <span class="n">data_augmentation</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
        <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">augmented_images</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">numpy</span><span class="p">()</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s2">&quot;uint8&quot;</span><span class="p">))</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s2">&quot;off&quot;</span><span class="p">)</span>
</code></pre></div>

<p><img alt="png" src="/img/examples/vision/image_classification_from_scratch/image_classification_from_scratch_18_2.png" /></p>
<hr />
<h2 id="standardizing-the-data">Standardizing the data</h2>
<p>Our image are already in a standard size (180x180), as they are being yielded as
contiguous <code>float32</code> batches by our dataset. However, their RGB channel values are in
the <code>[0, 255]</code> range. This is not ideal for a neural network;
in general you should seek to make your input values small. Here, we will
standardize values to be in the <code>[0, 1]</code> by using a <code>Rescaling</code> layer at the start of
our model.</p>
<hr />
<h2 id="two-options-to-preprocess-the-data">Two options to preprocess the data</h2>
<p>There are two ways you could be using the <code>data_augmentation</code> preprocessor:</p>
<p><strong>Option 1: Make it part of the model</strong>, like this:</p>
<div class="codehilite"><pre><span></span><code><span class="n">inputs</span> <span class="o">=</span> <span class="n">keras</span><span class="o">.</span><span class="n">Input</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">input_shape</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">data_augmentation</span><span class="p">(</span><span class="n">inputs</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">layers</span><span class="o">.</span><span class="n">Rescaling</span><span class="p">(</span><span class="mf">1.</span><span class="o">/</span><span class="mi">255</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>
<span class="o">...</span>  <span class="c1"># Rest of the model</span>
</code></pre></div>

<p>With this option, your data augmentation will happen <em>on device</em>, synchronously
with the rest of the model execution, meaning that it will benefit from GPU
acceleration.</p>
<p>Note that data augmentation is inactive at test time, so the input samples will only be
augmented during <code>fit()</code>, not when calling <code>evaluate()</code> or <code>predict()</code>.</p>
<p>If you're training on GPU, this may be a good option.</p>
<p><strong>Option 2: apply it to the dataset</strong>, so as to obtain a dataset that yields batches of
augmented images, like this:</p>
<div class="codehilite"><pre><span></span><code><span class="n">augmented_train_ds</span> <span class="o">=</span> <span class="n">train_ds</span><span class="o">.</span><span class="n">map</span><span class="p">(</span>
    <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="p">(</span><span class="n">data_augmentation</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">training</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span> <span class="n">y</span><span class="p">))</span>
</code></pre></div>

<p>With this option, your data augmentation will happen <strong>on CPU</strong>, asynchronously, and will
be buffered before going into the model.</p>
<p>If you're training on CPU, this is the better option, since it makes data augmentation
asynchronous and non-blocking.</p>
<p>In our case, we'll go with the second option. If you're not sure
which one to pick, this second option (asynchronous preprocessing) is always a solid choice.</p>
<hr />
<h2 id="configure-the-dataset-for-performance">Configure the dataset for performance</h2>
<p>Let's apply data augmentation to our training dataset,
and let's make sure to use buffered prefetching so we can yield data from disk without
having I/O becoming blocking:</p>
<div class="codehilite"><pre><span></span><code><span class="c1"># Apply `data_augmentation` to the training images.</span>
<span class="n">train_ds</span> <span class="o">=</span> <span class="n">train_ds</span><span class="o">.</span><span class="n">map</span><span class="p">(</span>
    <span class="k">lambda</span> <span class="n">img</span><span class="p">,</span> <span class="n">label</span><span class="p">:</span> <span class="p">(</span><span class="n">data_augmentation</span><span class="p">(</span><span class="n">img</span><span class="p">),</span> <span class="n">label</span><span class="p">),</span>
    <span class="n">num_parallel_calls</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">AUTOTUNE</span><span class="p">,</span>
<span class="p">)</span>
<span class="c1"># Prefetching samples in GPU memory helps maximize GPU utilization.</span>
<span class="n">train_ds</span> <span class="o">=</span> <span class="n">train_ds</span><span class="o">.</span><span class="n">prefetch</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">AUTOTUNE</span><span class="p">)</span>
<span class="n">val_ds</span> <span class="o">=</span> <span class="n">val_ds</span><span class="o">.</span><span class="n">prefetch</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">AUTOTUNE</span><span class="p">)</span>
</code></pre></div>

<hr />
<h2 id="build-a-model">Build a model</h2>
<p>We'll build a small version of the Xception network. We haven't particularly tried to
optimize the architecture; if you want to do a systematic search for the best model
configuration, consider using
<a href="https://github.com/keras-team/keras-tuner">KerasTuner</a>.</p>
<p>Note that:</p>
<ul>
<li>We start the model with the <code>data_augmentation</code> preprocessor, followed by a
 <code>Rescaling</code> layer.</li>
<li>We include a <code>Dropout</code> layer before the final classification layer.</li>
</ul>
<div class="codehilite"><pre><span></span><code><span class="k">def</span> <span class="nf">make_model</span><span class="p">(</span><span class="n">input_shape</span><span class="p">,</span> <span class="n">num_classes</span><span class="p">):</span>
    <span class="n">inputs</span> <span class="o">=</span> <span class="n">keras</span><span class="o">.</span><span class="n">Input</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">input_shape</span><span class="p">)</span>

    <span class="c1"># Entry block</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">layers</span><span class="o">.</span><span class="n">Rescaling</span><span class="p">(</span><span class="mf">1.0</span> <span class="o">/</span> <span class="mi">255</span><span class="p">)(</span><span class="n">inputs</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">layers</span><span class="o">.</span><span class="n">Conv2D</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">strides</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s2">&quot;same&quot;</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">layers</span><span class="o">.</span><span class="n">BatchNormalization</span><span class="p">()(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">layers</span><span class="o">.</span><span class="n">Activation</span><span class="p">(</span><span class="s2">&quot;relu&quot;</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>

    <span class="n">previous_block_activation</span> <span class="o">=</span> <span class="n">x</span>  <span class="c1"># Set aside residual</span>

    <span class="k">for</span> <span class="n">size</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">256</span><span class="p">,</span> <span class="mi">512</span><span class="p">,</span> <span class="mi">728</span><span class="p">]:</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">layers</span><span class="o">.</span><span class="n">Activation</span><span class="p">(</span><span class="s2">&quot;relu&quot;</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">layers</span><span class="o">.</span><span class="n">SeparableConv2D</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s2">&quot;same&quot;</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">layers</span><span class="o">.</span><span class="n">BatchNormalization</span><span class="p">()(</span><span class="n">x</span><span class="p">)</span>

        <span class="n">x</span> <span class="o">=</span> <span class="n">layers</span><span class="o">.</span><span class="n">Activation</span><span class="p">(</span><span class="s2">&quot;relu&quot;</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">layers</span><span class="o">.</span><span class="n">SeparableConv2D</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s2">&quot;same&quot;</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">layers</span><span class="o">.</span><span class="n">BatchNormalization</span><span class="p">()(</span><span class="n">x</span><span class="p">)</span>

        <span class="n">x</span> <span class="o">=</span> <span class="n">layers</span><span class="o">.</span><span class="n">MaxPooling2D</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">strides</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s2">&quot;same&quot;</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>

        <span class="c1"># Project residual</span>
        <span class="n">residual</span> <span class="o">=</span> <span class="n">layers</span><span class="o">.</span><span class="n">Conv2D</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">strides</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s2">&quot;same&quot;</span><span class="p">)(</span>
            <span class="n">previous_block_activation</span>
        <span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">layers</span><span class="o">.</span><span class="n">add</span><span class="p">([</span><span class="n">x</span><span class="p">,</span> <span class="n">residual</span><span class="p">])</span>  <span class="c1"># Add back residual</span>
        <span class="n">previous_block_activation</span> <span class="o">=</span> <span class="n">x</span>  <span class="c1"># Set aside next residual</span>

    <span class="n">x</span> <span class="o">=</span> <span class="n">layers</span><span class="o">.</span><span class="n">SeparableConv2D</span><span class="p">(</span><span class="mi">1024</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s2">&quot;same&quot;</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">layers</span><span class="o">.</span><span class="n">BatchNormalization</span><span class="p">()(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">layers</span><span class="o">.</span><span class="n">Activation</span><span class="p">(</span><span class="s2">&quot;relu&quot;</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>

    <span class="n">x</span> <span class="o">=</span> <span class="n">layers</span><span class="o">.</span><span class="n">GlobalAveragePooling2D</span><span class="p">()(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">num_classes</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
        <span class="n">activation</span> <span class="o">=</span> <span class="s2">&quot;sigmoid&quot;</span>
        <span class="n">units</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">activation</span> <span class="o">=</span> <span class="s2">&quot;softmax&quot;</span>
        <span class="n">units</span> <span class="o">=</span> <span class="n">num_classes</span>

    <span class="n">x</span> <span class="o">=</span> <span class="n">layers</span><span class="o">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">outputs</span> <span class="o">=</span> <span class="n">layers</span><span class="o">.</span><span class="n">Dense</span><span class="p">(</span><span class="n">units</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="n">activation</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">keras</span><span class="o">.</span><span class="n">Model</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span> <span class="n">outputs</span><span class="p">)</span>


<span class="n">model</span> <span class="o">=</span> <span class="n">make_model</span><span class="p">(</span><span class="n">input_shape</span><span class="o">=</span><span class="n">image_size</span> <span class="o">+</span> <span class="p">(</span><span class="mi">3</span><span class="p">,),</span> <span class="n">num_classes</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">keras</span><span class="o">.</span><span class="n">utils</span><span class="o">.</span><span class="n">plot_model</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">show_shapes</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div>

<p><img alt="png" src="/img/examples/vision/image_classification_from_scratch/image_classification_from_scratch_24_0.png" /></p>
<hr />
<h2 id="train-the-model">Train the model</h2>
<div class="codehilite"><pre><span></span><code><span class="n">epochs</span> <span class="o">=</span> <span class="mi">25</span>

<span class="n">callbacks</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">keras</span><span class="o">.</span><span class="n">callbacks</span><span class="o">.</span><span class="n">ModelCheckpoint</span><span class="p">(</span><span class="s2">&quot;save_at_</span><span class="si">{epoch}</span><span class="s2">.keras&quot;</span><span class="p">),</span>
<span class="p">]</span>
<span class="n">model</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span>
    <span class="n">optimizer</span><span class="o">=</span><span class="n">keras</span><span class="o">.</span><span class="n">optimizers</span><span class="o">.</span><span class="n">Adam</span><span class="p">(</span><span class="mf">1e-3</span><span class="p">),</span>
    <span class="n">loss</span><span class="o">=</span><span class="s2">&quot;binary_crossentropy&quot;</span><span class="p">,</span>
    <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;accuracy&quot;</span><span class="p">],</span>
<span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span>
    <span class="n">train_ds</span><span class="p">,</span>
    <span class="n">epochs</span><span class="o">=</span><span class="n">epochs</span><span class="p">,</span>
    <span class="n">callbacks</span><span class="o">=</span><span class="n">callbacks</span><span class="p">,</span>
    <span class="n">validation_data</span><span class="o">=</span><span class="n">val_ds</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div>

<div class="k-default-codeblock">

<div class="codehilite"><pre><span></span><code>Epoch 1/25
147/147 [==============================] - 116s 746ms/step - loss: 0.6531 - accuracy: 0.6416 - val_loss: 0.7669 - val_accuracy: 0.4957
Epoch 2/25
147/147 [==============================] - 109s 737ms/step - loss: 0.5026 - accuracy: 0.7559 - val_loss: 1.3825 - val_accuracy: 0.4957
Epoch 3/25
147/147 [==============================] - 109s 738ms/step - loss: 0.3928 - accuracy: 0.8243 - val_loss: 1.6816 - val_accuracy: 0.4957
Epoch 4/25
147/147 [==============================] - 109s 736ms/step - loss: 0.3307 - accuracy: 0.8588 - val_loss: 0.5025 - val_accuracy: 0.7520
Epoch 5/25
147/147 [==============================] - 109s 734ms/step - loss: 0.2758 - accuracy: 0.8860 - val_loss: 0.3462 - val_accuracy: 0.8545
Epoch 6/25
147/147 [==============================] - 109s 735ms/step - loss: 0.2357 - accuracy: 0.9023 - val_loss: 0.2712 - val_accuracy: 0.8825
Epoch 7/25
147/147 [==============================] - 109s 734ms/step - loss: 0.2011 - accuracy: 0.9201 - val_loss: 0.2131 - val_accuracy: 0.9135
Epoch 8/25
147/147 [==============================] - 109s 735ms/step - loss: 0.1787 - accuracy: 0.9275 - val_loss: 0.1969 - val_accuracy: 0.9227
Epoch 9/25
147/147 [==============================] - 109s 734ms/step - loss: 0.1650 - accuracy: 0.9321 - val_loss: 0.2306 - val_accuracy: 0.9178
Epoch 10/25
147/147 [==============================] - 109s 734ms/step - loss: 0.1474 - accuracy: 0.9408 - val_loss: 0.2430 - val_accuracy: 0.9107
Epoch 11/25
147/147 [==============================] - 109s 735ms/step - loss: 0.1352 - accuracy: 0.9461 - val_loss: 0.2783 - val_accuracy: 0.8768
Epoch 12/25
147/147 [==============================] - 109s 734ms/step - loss: 0.1291 - accuracy: 0.9474 - val_loss: 0.4632 - val_accuracy: 0.8419
Epoch 13/25
147/147 [==============================] - 109s 735ms/step - loss: 0.1208 - accuracy: 0.9521 - val_loss: 0.3907 - val_accuracy: 0.8456
Epoch 14/25
147/147 [==============================] - 110s 739ms/step - loss: 0.1162 - accuracy: 0.9553 - val_loss: 0.1503 - val_accuracy: 0.9417
Epoch 15/25
147/147 [==============================] - 109s 735ms/step - loss: 0.1037 - accuracy: 0.9598 - val_loss: 0.1484 - val_accuracy: 0.9406
Epoch 16/25
147/147 [==============================] - 109s 734ms/step - loss: 0.1018 - accuracy: 0.9605 - val_loss: 0.2480 - val_accuracy: 0.9054
Epoch 17/25
147/147 [==============================] - 109s 739ms/step - loss: 0.0949 - accuracy: 0.9629 - val_loss: 0.1585 - val_accuracy: 0.9378
Epoch 18/25
147/147 [==============================] - 109s 736ms/step - loss: 0.0941 - accuracy: 0.9622 - val_loss: 0.1452 - val_accuracy: 0.9432
Epoch 19/25
147/147 [==============================] - 109s 734ms/step - loss: 0.0862 - accuracy: 0.9668 - val_loss: 0.2644 - val_accuracy: 0.8904
Epoch 20/25
147/147 [==============================] - 109s 734ms/step - loss: 0.0889 - accuracy: 0.9656 - val_loss: 0.2335 - val_accuracy: 0.9182
Epoch 21/25
147/147 [==============================] - 109s 735ms/step - loss: 0.0792 - accuracy: 0.9687 - val_loss: 0.5037 - val_accuracy: 0.8751
Epoch 22/25
147/147 [==============================] - 109s 734ms/step - loss: 0.0651 - accuracy: 0.9737 - val_loss: 0.1103 - val_accuracy: 0.9551
Epoch 23/25
147/147 [==============================] - 109s 735ms/step - loss: 0.0641 - accuracy: 0.9751 - val_loss: 0.1846 - val_accuracy: 0.9299
Epoch 24/25
147/147 [==============================] - 109s 735ms/step - loss: 0.0709 - accuracy: 0.9735 - val_loss: 0.1151 - val_accuracy: 0.9575
Epoch 25/25
147/147 [==============================] - 109s 737ms/step - loss: 0.0612 - accuracy: 0.9768 - val_loss: 0.1259 - val_accuracy: 0.9510

&lt;keras.callbacks.History at 0x7fd3941c87b8&gt;
</code></pre></div>


</div>
<p>We get to &gt;90% validation accuracy after training for 25 epochs on the full dataset
(in practice, you can train for 50+ epochs before validation performance starts degrading).</p>
<hr />
<h2 id="run-inference-on-new-data">Run inference on new data</h2>
<div class="codehilite"><pre><span></span><code><span class="n">img</span> <span class="o">=</span> <span class="n">keras</span><span class="o">.</span><span class="n">utils</span><span class="o">.</span><span class="n">load_img</span><span class="p">(</span>
    <span class="s2">&quot;PetImages/Cat/6779.jpg&quot;</span><span class="p">,</span> <span class="n">target_size</span><span class="o">=</span><span class="n">image_size</span>
<span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>

<span class="n">img_array</span> <span class="o">=</span> <span class="n">keras</span><span class="o">.</span><span class="n">utils</span><span class="o">.</span><span class="n">img_to_array</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
<span class="n">img_array</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">img_array</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1"># Create batch axis</span>

<span class="n">predictions</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">img_array</span><span class="p">)</span>
<span class="n">score</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">predictions</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;This image is </span><span class="si">{</span><span class="mi">100</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">score</span><span class="p">)</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2">% cat and </span><span class="si">{</span><span class="mi">100</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">score</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2">% dog.&quot;</span><span class="p">)</span>
</code></pre></div>

<div class="k-default-codeblock">

<div class="codehilite"><pre><span></span><code>1/1 [==============================] - 0s 446ms/step
This image is 85.28% cat and 14.72% dog.
</code></pre></div>


</div>
        </div>
        
        <div class='k-outline'>
          
            <div class='k-outline-depth-1'>
              
              <a href='#image-classification-from-scratch'>Image classification from scratch</a>
            </div>
          
            <div class='k-outline-depth-2'>
               ◆  
              <a href='#introduction'>Introduction</a>
            </div>
          
            <div class='k-outline-depth-2'>
               ◆  
              <a href='#setup'>Setup</a>
            </div>
          
            <div class='k-outline-depth-2'>
               ◆  
              <a href='#load-the-data-the-cats-vs-dogs-dataset'>Load the data: the Cats vs Dogs dataset</a>
            </div>
          
            <div class='k-outline-depth-3'>
              
              <a href='#raw-data-download'>Raw data download</a>
            </div>
          
            <div class='k-outline-depth-3'>
              
              <a href='#filter-out-corrupted-images'>Filter out corrupted images</a>
            </div>
          
            <div class='k-outline-depth-2'>
               ◆  
              <a href='#generate-a-dataset'>Generate a <code>Dataset</code></a>
            </div>
          
            <div class='k-outline-depth-2'>
               ◆  
              <a href='#visualize-the-data'>Visualize the data</a>
            </div>
          
            <div class='k-outline-depth-2'>
               ◆  
              <a href='#using-image-data-augmentation'>Using image data augmentation</a>
            </div>
          
            <div class='k-outline-depth-2'>
               ◆  
              <a href='#standardizing-the-data'>Standardizing the data</a>
            </div>
          
            <div class='k-outline-depth-2'>
               ◆  
              <a href='#two-options-to-preprocess-the-data'>Two options to preprocess the data</a>
            </div>
          
            <div class='k-outline-depth-2'>
               ◆  
              <a href='#configure-the-dataset-for-performance'>Configure the dataset for performance</a>
            </div>
          
            <div class='k-outline-depth-2'>
               ◆  
              <a href='#build-a-model'>Build a model</a>
            </div>
          
            <div class='k-outline-depth-2'>
               ◆  
              <a href='#train-the-model'>Train the model</a>
            </div>
          
            <div class='k-outline-depth-2'>
               ◆  
              <a href='#run-inference-on-new-data'>Run inference on new data</a>
            </div>
          
        </div>
        
      </div>
    </div>

  </div>

</body>

<footer style="float: left; width: 100%; padding: 1em; border-top: solid 1px #bbb;">
  <a href="https://policies.google.com/terms">Terms</a> | <a href="https://policies.google.com/privacy">Privacy</a>
</footer>

</html>